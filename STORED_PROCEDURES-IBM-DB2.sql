# FIRST ROUTINE DEFINED WILL BE A TRANFORM PROCEDURE


# STORED PROCEDURES CAN BE USEFUL FOR REPETITIVE TASKS
# THEY ARE ALSO COST EFFICIENT, RELATIVE TO QUERIES.. DUE TO BEING PRE-COMPILED


# PURPOSE WILL BE TO SET SALES PRICES; I.E. 10%, 25% AND 50%


# TABLE(S) CAN BE COPIED BEFORE ROUTINE OCCURS; 
# WHEN  SALE IS OVER, ORIGINAL TABLE CAN BE SET BACK TO ORIGINAL PRICE.. A SCHEDULED CRONJOB CAN BE IMPLEMENTED TO AUTOMATE FREQUENT SALES


--#SET TERMINATOR @                      # BEGIN ROUTINE

# ARG -- UPDATE_SALESPRICE(SALE_LEVEL, ITEM_BRAND, ITEM_CATEGORY) ; E.G. UPDATE_SALESPRICE('LOW', 'BRAND1', 'DAIRY') 
CREATE PROCEDURE UPDATE_SALESPRICE (   
  
    IN SALE_LEVEL VARCHAR(4),           # I/O TYPE, PARAMETER, DATA-TYPE
    IN ITEM_BRAND VARCHAR(15), 
    IN ITEM_CATEGORY VARCHAR(15)
  
  )
  
LANGUAGE SQL                            # DELARES LANGUAGE FOR ROUTINE
MODIFIES SQL DATA                       # ROUTINE CAN ONLY UPDATE/MODIFY DATA IN TABLE
  
BEGIN                                   # BEGIN CONDITIONAL

    IF SALES_LEVEL = 'LOW' THEN
        
        UPDATE ITEM_PRICES              # ITEM_PRICES = TABLE
        
        # 10% OFF
        SET SALESPRICE = SALESPRICE * 0.9
        
        WHERE BRAND = ITEM_BRAND AND CATEGORY = ITEM_CATEGORY;
        
    
    ELSEIF SALES_LEVEL = 'MID' THEN
        
        UPDATE ITEM_PRICES
        
        # 25% OFF
        SET SALESPRICE = SALESPRICE * 0.75
        
        WHERE BRAND = ITEM_BRAND AND CATEGORY = ITEM_CATEGORY;
        
    ELSEIF SALES_LEVEL = 'HIGH' THEN
        
        UPDATE ITEM_PRICES
        
        # 50% OFF
        SET SALESPRICE = SALESPRICE * 0.5
        
        WHERE BRAND = ITEM_BRAND AND CATEGORY = ITEM_CATEGORY;
        
    ELSE UPDATE ITEM_PRICES
        
        SET SALESPRICE = SALESPRICE
        
        WHERE BRAND = ITEM_BRAND AND CATEGORY = ITEM_CATEGORY
        
    
    END IF;         # END CONDITIONAL
    
END
@                   # END ROUTINE

